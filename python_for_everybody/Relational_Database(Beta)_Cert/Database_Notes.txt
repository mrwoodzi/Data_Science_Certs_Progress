Bash Tutorial:
    pink - images
        .jpg
        .png 
        .svg 
    blue - folders
    white - files 
        .font
        .css 
        .js 
        .txt 
    make sure you are in the freeCodeCamp folder 
    echo 
        printing in terminal 
        echo text >> filename (You need the arrows)
            printing to a file 
            appends to the file is better way to think about it 
    more 
        more filename
        prints contents of file 
    Adding a flag:
        ls the_flag
        long list format =  ls -l (lower case L)
    Look inside a file 
        more command
    Go back 2 folders cd ../..
    echo 
        print command 
    touch filename  
        creates a new file
        touch filename
        touch dir/dir/filename 
    .gitignore was hidden when we created it
    --help
        command_you_want_help_with --help 
    cp 
        copy a file 
        cp <file> <destination>
    rm 
        remove file from current directory 
        rm filename 
    mv 
        rename filename or move something 
        mv <filename> <new_filename> 
        mv <file> <destination>
        mv <file> <folder/folder>
    find 
        allows you to view file tree in current folder 
        find
            You can see everything in this website folder and its descendant folders
        find <folder_name>
            specific folder 
        find -name <filename> or <folder>
            finding a specific file in folder or find a folder 
        find dir/dir/dir
    mkdir 
        mk directoryName
        mkdir client/<new_folder_name>
            making folder inside folder 
    -r, -R, --recursive   remove directories and their contents recursively or copy 
        -removing dir/folders with their contents 
        cp -r dirname newdirname 
            -does a copy paste and rename 


BUILDING A MARIO DATABASE 
login = psql --username=freecodecamp --dbname=postgres\d 
Your virtual machine comes with PostgreSQL installed. You will use the Psql terminal application to interact 
    with it. Log in by typing psql --username=freecodecamp --dbname=postgres into the terminal and pressing enter.

    CURRENT STOPPING POINT:
        psql --username=freecodecamp --dbname=postgres
        second_database
        \c mario_database

        Creating Database 
            create database database_name(); yes with parenthesis
        DATA types  
            int 
            varchar(give it a numeric maximum allowable length)
                -stands for character varying 
            bigint 
        list
            \list 
            \d table_name
                will list stuff in table 
        connect 
            \c database_name
            think about as moving into a folder/dir 
        tables 
            \d 
            to view tables in current database 
            viewing more details of table
                \d table_name
        Creating Table 
            create table table_name();
            CREATE TABLE table_name(column_names . . .)
            CREATE TABLE table_name(column_name DATATYPE CONSTRAINTS);
        ADD COLUMN 
            ALTER TABLE table_name ADD COLUMN column_name DATATYPE;
            ALTER TABLE table_name ADD COLUMN column_name VARCHAR(40) NOT NULL UNIQUE;
        ALTER COLUMN    
            ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;
            ALTER TABLE table_name ALTER COLUMN column_name VARCHAR(40) NOT NULL UNIQUE;
        DROP/REMOVE COLUMN 
            ALTER TABLE table_name DROP COLUMN column_name;
        RENAME COLUMN 
            ALTER TABLE table_name RENAME COLUMN column_name TO new_name;
        WHERE 
            WHERE to view data 
                SELECT columns FROM table_name WHERE condition;
        Querying Data 
            SELECT * FROM table_name; # star selects all columns 
        INSERT ROW/ADD ROW 
            insert into table_name(column1, column2) values(int, str);
                INSERT MULTIPLE 
                    INSERT INTO table_name(column_1, column_2) VALUES(value_1, value_2), (value_1, value_2);
        DELETE
            delete from table_name where column_name='Luigi';
        ALTER TABLE 
            alter table second_table drop username; # column names don't have to be in quotes
            changing primary key 
                ALTER TABLE table_name DROP CONSTRAINT constraint_name;
                    Try using ALTER TABLE characters DROP CONSTRAINT characters_pkey; (constraint name is found select * from TABLE_NAME)
            Foreign Key 
                    Try using ALTER TABLE characters DROP CONSTRAINT characters_pkey; (constraint name is found select * from TABLE_NAME)
            UNIQUE 
                ALTER TABLE table_name ADD UNIQUE(column_name);

        DROP    
            drop table table_name; 
            ALTER TABLE table_name DROP CONSTRAINT constraint_name;
        ALTER DATABASE/RENAMING 
            -renaming 
                ALTER DATABASE database_name RENAME TO new_database_name;
            -deleting database  
                DROP DATABASE database_name;
        TYPE 
            - ALERT TABLE table_name ADD COLUMN column_name type_name;

            -SERIAL 
                -column an INT with a NOT NULL constraint, and automatically increment 
                    the integer when a new row is added
            -VARCHAR*(char_length)
            -INT 
            -DATE 
            -NUMERIC(4, 1)
                 has up to four digits and one of them has to be to the right of the decimal.
            -NOT NULL   
                this can be add to a row that is already of type INT 
                ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;
        UPDATE/CHANGE ROW   
            -UPDATE table_name SET column_name='new_value__for_cell' WHERE different_column_name='index_name' 
                ### index_name doesn't have to be an actual index just something sharing the row with the new_value__for_cell
        Primary Key 
            ALTER TABLE table_name ADD PRIMARY KEY(column_name);
                Deleting Primary Key 
                    ALTER TABLE table_name DROP CONSTRAINT constraint_name; (constraint name is found select * from TABLE_NAME)
        Foreign Key:
            ALTER TABLE table_name ADD COLUMN column_name DATATYPE REFERENCES referenced_table_name(referenced_column_name);

"Many to Many" Relationship     
    many of the characters can perform many actions. 