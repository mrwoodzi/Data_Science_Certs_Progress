Operators:
"is" and "is not"
    Python has an "is" operator that 
    can be used in logical expressions

    implies "is the same as"

    similar to, but stronger than ==

    "is not" is also a logical operator

    use "is" for booleans and None types, no floats variables and strings 
For Example: **************************
 0 is 0.0 = False because it's stonger than == and demands that type and value are == 

 You can you use 'in' as a logical operator and for loops

Python has a number of string functions what are in the string library

These functions are already built into every string - we invoke them by appending the
function to the string variable

These functions do not modify the original string, instead they return a new string that has
been altered

************Object oriented is x.whatever() also called a method call

Definitions:
Algorithms - A set of rules or steps used to solve a problem
Data Structures - A particular way of organizing data in a computer
List - A linear collection of values that stay in order, you index to get at the date [0, 1, 2, 3]
    A kind of collection, you can have a list inside of a list [1, [4, 5], 4, 5]
    mutable - we can change an element of a list using the index operator
    T/F operators are 'in' and 'not in'
    Built in Functions -  len, max, min, sum, 
dir - command used when programming that will pull up a potential list of methods
    dir(whatever_you_need_options_for)
append - means to add to the end 
delimiter - used in 'split' function gets rid of white space or can be assigned to split a specific character
            split(';')
Collection - List and Dictionaries
Dictionaries - A 'bag' of values, each with its own label
    the 'bag' has no particular order   
    index operator can look up what you need
    Dictionary Literals(Constants)
        {'Key':Value} 

***Dictionaries are like lists except that they use keys instead of numbers to look up values

lst = list()                        ddd = dict()
lst.append(21)                      ddd['age'] = 21
lst.append(183)                     ddd['course'] = 182
print(lst)                          print(ddd)
>>>[21, 183]                        >>>{'course': 182, 'age': 21}
lst[0] = 23                         ddd['age'] = 23
print(lst)                          print(ddd)
>>>[23, 183]                        {'course': 182, 'age': 23}

.items in dictionaries will put the key value{'jan' : 100, 'chuck' : 1, 'fred' : 42} pair into a list 
                                                [('jan', 100), ('chuck', 1), ('fred', 42)]
                                                