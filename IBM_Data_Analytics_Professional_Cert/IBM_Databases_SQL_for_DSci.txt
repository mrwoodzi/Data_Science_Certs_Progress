SQL - Structured Query Language

Database is like a Python Class:
Column headings are the Class and everything
    under that column heading is a class attribute. 



Welcome to SQL for Data Science:
    SQL is 1 of top 3 skills for data science
    boost your professional profile
    give you a good understanding of relational databases

    What is SQL?
         SQL is a language used for relational databases to query or get data out of a database. 
         SQL is also referred to as SQL and is short for its original name Structured English Query Language. 
         So SQL is a language used for a database to query data. 

    What is Data?
        Data is a collection of facts in the form of words, numbers, or even pictures. 
        Data is one of the most critical assets of any business. 
        It is used and collected practically everywhere. 

    What are Databases?
        Databases are everywhere and used every day, but they are largely taken for granted. 
        A database is a repository of data. It is a program that stores data. 
        A database also provides the functionality for adding, modifying, and querying that data. 
        There are different kinds of databases of different requirements. 
        The data can be stored in various forms. 
        Tabular is columns and rows - relational database 

    DBMS:
        Database Management System
        The terms database, database server, database system, data server, and database management 
            systems are often used interchangeably. 
        
    RDBMS
         Examples of relational database management systems are my SQL, Oracle Database, 
            DB2 Warehouse, and DB2 on Cloud. 

    5 simple commands:
        For the majority of people using a database, there are five simple commands to create a table, 
        CREATE
        INSERT data to populate the table, 
        SELECT data from the table, 
        UPDATE data in the table, 
        DELETE data from the table.
    
    Comparison Operators
        =, >, <, >=, <=, <>  last is not equal



The general syntax of SELECT statments is:

select COLUMN1, COLUMN2, ... from TABLE1 ;
****To retrieve all columns from the COUNTRY table we could use "*" instead of specifying individual column names:
select * from COUNTRY ;
The WHERE clause can be added to your query to filter results or get specific rows of data. To retrieve data for 
****all rows in the COUNTRY table where the ID is less than 5:
***select * from COUNTRY where ID < 5 ;
***In case of character based columns the values of the predicates in the where clause need to be enclosed in 
****single quotes. To retrieve the data for the country with country code "CA" we would issue:
select * from COUNTRY where CCODE = 'CA' ;

Why is there a semicolon after the SQL statements?

Some database systems require a semicolon at the end of each SQL statement for execution. 
It is a standard way to separate one SQL statement from another which allows more than one SQL statement 
to be executed in the same call to the server. 
So, it is good practice to use a semicolon at the end of each SQL statement.

SELECT Title, Director, Writer FROM FilmLocations; # only gives those columns
SELECT colmn1, * From FilmLocations; # will give whole db with column1 as index 
SELECT Title, ReleaseYear, Locations FROM FilmLocations WHERE ReleaseYear>=2001;
SELECT Title, ReleaseYear, Locations FROM FilmLocations WHERE ReleaseYear<=2000; 
SELECT Title, ProductionCompany, Locations, ReleaseYear FROM FilmLocations WHERE Writer<>"James Cameron"; 


    # Writer on the above is a column name. It does not pull up data from Writer column 




    SELECT Statement:
        to see data use SELECT
        is a Data Manipulation Language(DML) statement used to read and modify data
            SELECT statement: Query
            Result from the query: Result set/table

            Select * from <tablename>
            Select * column1, column2 from <tablename>
    FROM Clause:
        specifies from which table to get the data. 
        can also include JOIN subclause
            -specifies rules for joining tables
    WHERE Clause:
        specifies which rows to retrieve
        True, False or Unknown
        Always requires a predicate
        Select * column1, from <tablename>
            where column1='str' or 'numeric'
COUNT
     COUNT is a built-in database function that retrieves the number of rows that match the query criteria
     or example, get the total number of rows in a given table, select COUNT(*) from tablename. 
     Kinda like len() for rows 
     Select COUNT(COUNTRY) from MEDALS where COUNTRY='CANADA.'
     SELECT COUNT(*) FROM FilmLocations; # counts all rows
DISTINCT
    DISTINCT is used to remove duplicate values from a result set. 
    Like Keys in a Dictionary
    Example, to retrieve unique values in a column, select DISTINCT columnname from tablename.
     Select DISTINCT COUNTRY from MEDALS where MEDALTYPE = 'GOLD'. 
LIMIT
    LIMIT is used for restricting the number of rows retrieved from the database. 
    LIke .head() in pandas 
    SELECT * FROM FilmLocations LIMIT 15 OFFSET 10;
    Select * from tablename LIMIT 10.
    Select * from MEDALS where YEAR = 2018 LIMIT 5

DML Statements:****************************************************************************
        Data Manipulation Language

The search condition of the WHERE clause uses a predicate to refine the search. 
COUNT, DISTINCT, and LIMIT are expressions that are used with SELECT statements.
INSERT, UPDATE, and DELETE are DML statements for populating and changing tables. 

INSERT:
    populates table with data 
    INSERT INTO DATABASE_NAME
    VALUES:
        this is where row information is
        ('stuff','stuff','more stuff')

INSERT INTO Instructor(ins_id, lastname, firstname, city, country) # columns
VALUES(4, 'Saha', 'Sandip', 'Edmonton', 'CA'); #Rows

INSERT INTO Instructor(ins_id, lastname, firstname, city, country)
VALUES(5, 'Doe', 'John', 'Sydney', 'AU'), (6, 'Doe', 'Jane', 'Dhaka', 'BD');


UPDATE:
    used to alter or modify database table
    UPDATE Tablename # Select Table
    SET ColumnName = Value, ColumnName = Value, ColumnName = Value  # Select Column and give new value
    WHERE Condition  # Selects Row
        # if you do not specifiy the WHERE statement SQL  will select all rows

    UPDATE table_name
    SET column1 = value1, column2 = value2, ... # columns we want with new data 
    WHERE ColumnName = row; # this is like the index 

UPDATE Instructor 
SET city='Toronto' 
WHERE firstname="Sandip";

UPDATE Instructor 
SET city='Dubai', country='AE' 
WHERE ins_id=5;

DELETE:
    used to read and modify data 
    DELETE FROM Tablename
    WHERE Column_You_Want IN ('row_you_want', 'other_row_you_want') 
        # where is optional but if you do not specifiy it will select all rows


DELETE FROM instructor
WHERE ins_id = 6; # Deletes whole row including index 6



FilmLocations(
    Title:              titles of the films, 
    ReleaseYear:        time of public release of the films, 
    Locations:          locations of San Francisco where the films were shot, 
    FunFacts:           funny facts about the filming locations, 
    ProductionCompany:  companies who produced the films, 
    Distributor:        companies who distributed the films, 
    Director:           people who directed the films, 
    Writer:             people who wrote the films, 
    Actor1:             person 1 who acted in the films, 
    Actor2:             person 2 who acted in the films, 
    Actor3:             person 3 who acted in the films
)
SELECT COUNT(Locations) FROM FilmLocations WHERE Writer="James Cameron";
    # Retrieve the number of locations of the films which are written by James Cameron.

SELECT COUNT(Locations) FROM FilmLocations WHERE Director="Woody Allen";
    # Retrieve the number of locations of the films which are directed by Woody Allen.

SELECT COUNT(Title) FROM FilmLocations WHERE Locations="Russian Hill";
    # Retrieve the number of films shot at Russian Hill.

SELECT COUNT(ReleaseYear) FROM FilmLocations WHERE ReleaseYear<1950;
    # Retrieve the number of rows having a release year older than 1950 from the “FilmLocations” table.

SELECT COUNT(DISTINCT ReleaseYear) FROM FilmLocations WHERE ProductionCompany="Warner Bros. Pictures";
    # Retrieve the number of release years of the films distinctly, produced by Warner Bros. Pictures.

SELECT DISTINCT Title FROM FilmLocations WHERE ReleaseYear>2000;
    # Retrieve the name of all unique films released in the 21st century and onwards, along with their release years.

SELECT DISTINCT Director, Title FROM FilmLocations WHERE Locations="City Hall";
    # Retrieve the names of all the directors and their distinct films shot at City Hall

SELECT COUNT(DISTINCT Distributor) FROM FilmLocations WHERE Actor1="Clint Eastwood";
    # Retrieve the number of distributors distinctly who distributed films acted by Clint Eastwood as 1st actor.

SELECT * FROM FilmLocations LIMIT 15 OFFSET 10;
    # Retrieve the first 15 rows from the “FilmLocations” table starting from row 11

SELECT DISTINCT Title FROM FilmLocations LIMIT 50;
    # Retrieve the name of first 50 films distinctly

SELECT DISTINCT Title FROM FilmLocations WHERE ReleaseYear=2015 LIMIT 10;
    # Retrieve first 10 film names distinctly released in 2015

SELECT DISTINCT Title FROM FilmLocations WHERE ReleaseYear=2015 LIMIT 3 OFFSET 5;
    # retrieve the next 3 film names distinctly after first 5 films released in 2015.

Command	Syntax	Description	Example
SELECT	SELECT column1, column2, ... FROM table_name;	SELECT statement is used to fetch data from a database.	SELECT city FROM placeofinterest;
WHERE	SELECT column1, column2, ...FROM table_name WHERE condition;	WHERE clause is used to extract only those records that fulfill a specified condition.	SELECT * FROM placeofinterest WHERE city == 'Rome' ;
COUNT	SELECT COUNT * FROM table_name ;	COUNT is a function that takes the name of a column as argument and counts the number of rows when the column is not NULL.	SELECT COUNT(country) FROM placeofinterest WHERE country='Canada';
DISTINCT	SELECT DISTINCT columnname FROM table_name;	DISTINCT function is used to specify that the statement is a query which returns unique values in specified columns.	SELECT DISTINCT country FROM placeofinterest WHERE type='historical';
LIMIT	SELECT * FROM table_name LIMIT number;	LIMIT is a clause to specify the maximum number of rows the result set must have.	SELECT * FROM placeofinterest WHERE airport="pearson" LIMIT 5;
INSERT	INSERT INTO table_name (column1,column2,column3...) VALUES(value1,value2,value3...);	INSERT is used to insert new rows in the table.	INSERT INTO placeofinterest (name,type,city,country,airport) VALUES('Niagara Waterfalls','Nature','Toronto','Canada','Pearson');
UPDATE	UPDATE table_name SET[[column1]=[VALUES]] WHERE [condition];	UPDATE used to update the rows in the table.	UPDATE placeofinterest SET name = 'Niagara Falls' WHERE name = "Niagara Waterfalls";
DELETE	DELETE FROM table_name WHERE [condition];	DELETE statement is used to remove rows from the table which are specified in the WHERE condition.	DELETE FROM placeofinterest WHERE city IN ('Rome','Vienna');


Database Concepts:
    ERD table   
        -entity relationship data modelling
        -most used data model 
        -allows for data independence 
        -data is stored in tables 
    
    Entity-Relationship model   ER Model
        -Common data types include characters such as car and VAR char, numbers such as integer 
            and decimal, and timestamps including date and time
        -Used as a tool to design relational databases 
        -Objects 
        -The entity book becomes a table in the database and the attributes become the columns in a table
        - The building blocks of an ER diagram are entities and attributes. 
            -entities 
                - independent objects which can have multiple characteristics called attributes. 
                - name of a table 
                - like a CLASS in Python
                - typically a noun 
                -have attributes which are the data elements that charaterize the entity 
            -attributes 
                -become columns in a table 
                -are certain properties or characteristics of an entity and tell us more about the entity.  
                -connected to 1 entity 
                -each attribute stores data in a type
            -VAR char 
                -vary in length, we can set the variable character data type for the title column: VAR char
            -char 
                - For character columns that do not vary in length, we use character or char. 
            -carved
                -both char and numeric 
         Using the book entity mapping as an example, we can create the tables for the remainder of 
         our simplified library example using entity names, like author, author list, borrower, loan, 
         and copy. The entity attributes will be the columns of the tables. 
            -primary key
                - unique index 
                -uniquely identifies each tuple or row in a table, preventing duplication of data and 
                    providing a way of defining relationships between tables. 
            -foreign keys 
                - are primary keys defined in other tables, creating a link between the tables.

        How to Create a Database Instance on Cloud:
            Advantages:
                -easy of use 
                    -api, web interface, cloud or remore apps
                -scalability and economics
                    -expand/shink storage and compute resources 
                    -pay per use
                -disaster recovery 
            Examples of databases 
                -IBM DB2
                -Databases for PostgreSQL
                -Oracle Database Cloud Service
                -Microsoft Azure SQL Database
                -Amazon Relational Database Services RDS 
            Database Service Instances:
                -DBaas provides users with access to Database resources in cloud without    
                    setting up hardware and installing software 
                -Database service instance holds data in data objects/tables
                -Once data is loaded, it can be queried using web interfaces and apps 
            Creating a DB2 Cloud Instance:

Types if SQL Statments (DDL vs. DML) 
    DDL
        Data Definition Language Statements 
            -these define, change or drop data 
            -CREATE - creates columns and tables 
            -ALTER - alters tables including adding and dropping columns 
                    and modding data type 
                    add or remove keys
                    add or remove constraints 
            -TRUNCATE - deleting dataq in a table but not table itself
            -DROP - used for deleting tables 

    DML or CRUD Operations 
        Data Manipulation Language Statements 
            -used to read and modify data 
            -INSERT - inserting a row or many rows of data into table 
            -SELECT - reads or selects row or rows of data from table 
            -UPDATE - edits row or rows in table 
            -DELETE -removes row or rows of data from a table 

        DATATYPES   
            CHAR, VARCHAR, 
            BIGINT - holds number up to 19 digits long 
        

        CREATE TABLE table_name (column_name datatype, column_other datatype)

        CREATE TABLE table_name(
            column_1 char(2) PRIMARY KEY NOT NULL,
            column_2 varchar(15) NOT NULL,
            column_3 varchar(15) NOT NULL,
            column_4 varchar(40),
            column_5 char(2)
        );

        ALTER TABLE table_name  
            ADD COLUMN column_name datatype
            ADD COLUMN column_name2 datatype;

            # resetting data type of column
            ALTER TABLE table_name
                ALTER COLUMN columnYouWantToAlter SET DATA Types    
                datatype;

        DROP TABLE 
            DROP TABLE table_name;
        
        TRUNCATE TABLE 
            # deletes all rows of a table 
            TRUNCATE TABLE table_name IMMEDIATE; 
                # IMMEDIATE means right now delete everything and there's 
                    no going back 

SUMMARY AND HIGHLIGHTS:

A database is a repository of data that provides functionality for adding, 
    modifying, and querying the data. 
SQL is a language used to query or retrieve data from a relational database. 
The Relational Model is the most used data model for databases because it allows
     for data independence. 
The primary key of a relational table uniquely identifies each tuple or row, 
    preventing duplication of data and providing a way of defining relationships between tables. 
SQL statements fall into two different categories: Data Definition Language 
    DDL) statements and Data Manipulation Language (DML) statements.
Relation - a set of tuples that have the same attributes, Attribute:Tuple or Column:Row 
    tuple usually represents an object
    Relation is usually described as a table
        table is organized into rows and columns
        Attribute is the Column
        Tuples are the Row

SQL Cheat Sheet: CREATE TABLE, ALTER, DROP, TRUNCATE

Command	            Example
CREATE TABLE	    CREATE TABLE employee ( employee_id char(2) PRIMARY KEY, first_name varchar(30) NOT NULL, mobile int);
ALTER TABLE -       ALTER TABLE employee ADD COLUMN income bigint;
ALTER TABLE -       ALTER TABLE employee ALTER COLUMN mobile SET DATA TYPE CHAR(20);
ALTER TABLE -       ALTER TABLE employee DROP COLUMN mobile;
ALTER TABLE -       ALTER TABLE employee RENAME COLUMN first_name TO name;
TRUNCATE TABLE	    TRUNCATE TABLE employee IMMEDIATE;
DROP TABLE	        DROP TABLE employee;
        
ADVANCED TECHNIQUES:
WHERE:
    WHERE clause always requires a redicate 
        predicate is an expression that evaluates to True, False or Unknown
    LIKE 
        used with WHERE if you don't know exact string pattern of search 
        EX: WHERE column_name LIKE 'string%'
            you need % sign 
            string would represent "WILD CARD CHARACTER"

            SELECT F_NAME , L_NAME
            FROM EMPLOYEES
            WHERE ADDRESS LIKE '%Elgin,IL%';

            # retrieving all rows from 1970s
            SELECT F_NAME, L_NAME 
            FROM employees
            WHERE B_DATE like '197%';
        
    BOOL  
        is used after WHERE clause 
            SELECT column_name1, column2 FROM database_name 
                WHERE column_name2 >= 349 AND column2 <= 300;
            
            # Below will output same as above 
            # Below would be preferred for readability
            SELECT column_name1, column2 FROM database_name 
                WHERE column_name2 between 290 AND 300;

                SELECT *
                FROM EMPLOYEES
                WHERE (SALARY BETWEEN 60000 AND 70000) AND DEP_ID = 5;
    
    IN 
        allows us to specify a set of values in a WHERE clause. 
            This operator takes a list of expressions to compare against

        SELECT column1, column2, column3 FROM db_name
            WHERE column3='str' OR column3='other_str' OR column3='and_other_str'

        # Below will output same as above 
        # Below would be preferred for readability 
        SELECT column1, column2, column3 FROM db_name
            WHERE column3 IN ('STR', 'STR', 'str', 'str)


SORTING RESULT SETS: 
    ORDER BY 
        -default sort is ascending order 

        SELECT column_name FROM table_name
            ORDER BY column_name;

        # To sort in descending order 
        SELECT column_name FROM table_name
            ORDER BY column_name DESC;

         # To sort on starting number 
        SELECT column_name FROM table_name
            ORDER BY column_name 2;

        SELECT F_NAME, L_NAME, DEP_ID 
        FROM EMPLOYEES
        ORDER BY DEP_ID;

        COUNT
     COUNT is a built-in database function that retrieves the number of rows that match the query criteria
     or example, get the total number of rows in a given table, select COUNT(*) from tablename. 
     Kinda like len() for rows 
     Select COUNT(COUNTRY) from MEDALS where COUNTRY='CANADA.'
     SELECT COUNT(*) FROM FilmLocations; # counts all rows

--For each department ID retrieve the number of employees in the department.
SELECT DEP_ID, count(*)
FROM EMPLOYEES 
GROUP BY DEP_ID;

--For each department retrieve the number of employees in the department, 
--and the average employee salary in the department..
SELECT DEP_ID, count(*), AVG(salary)
FROM EMPLOYEES 
GROUP BY DEP_ID;

--Retrieve a list of employees ordered in descending order 
-----by department ID and within each department ordered alphabetically 
------in descending order by last name.
SELECT F_NAME, L_NAME, DEP_ID 
FROM EMPLOYEES
ORDER BY DEP_ID, L_NAME DESC;

--In SQL problem 2 (Exercise 2 Problem 2), use department name instead of 
--department ID. Retrieve a list of employees ordered by department name, 
--and within each department ordered alphabetically in descending order by last name.
****************HAVE TO USE "AS" IN THIS**************************
SELECT D.DEP_NAME , E.F_NAME, E.L_NAME
FROM EMPLOYEES as E, DEPARTMENTS as D
WHERE E.DEP_ID = D.DEPT_ID_DEP
ORDER BY D.DEP_NAME, E.L_NAME DESC;


--In SQL problem 3 (Exercise 3 Problem 3), order the result set by Average Salary..
SELECT DEP_ID, count(*) AS NUM_EMPLOYEES, AVG(salary) AS  AVG_SALARY
FROM EMPLOYEES 
GROUP BY DEP_ID
ORDER BY AVG_SALARY;


GROUPING RESULT SETS:
    DISTINCT - eliminates duplicates from set 
    GROUP BY 
        groups a result into subsets that has matching values for one or more columns.
        groups and counts 

        SELECT column_name, COUNT(column_name)
            FROM db_name GROUP BY column_name;
    
        # assigning the counted column as a new name
        SELECT column_name, COUNT(column_name) AS New_Column_Name, AVG(column_name) AS ANOTER_COLUMN_NAME 
        FROM db_name 
        GROUP BY column_name;

--Label the computed columns in the result set of SQL problem 2 
--(Exercise 3 Problem 2) as NUM_EMPLOYEES and AVG_SALARY.
    SELECT DEP_ID, count(*) AS NUM_EMPLOYEES, AVG(salary) AS  AVG_SALARY
    FROM EMPLOYEES 
    GROUP BY DEP_ID;

        HAVING:
            HAVING- keyword is used to set a condition for a GROUP BY clause
            used in combination with the "group by" clause. 
            It is very important to note that the "where" clause is for the entire 
                result set, but the "having" clause works only with the "group by" clause

            # only lists results that are greater than 4
            SELECT column_name, COUNT(column_name)
                AS New_Column_Name FROM db_name 
                GROUP BY column_name
                HAVING COUNT(column_name) > 4;

--In SQL problem 4 (Exercise 3 Problem 4), limit the result to departments with fewer than 4 employees.
SELECT DEP_ID, count(*) AS NUM_EMPLOYEES, AVG(salary) AS  AVG_SALARY
FROM EMPLOYEES 
GROUP BY DEP_ID
HAVING count(*) < 4
ORDER BY AVG_SALARY;





            GROUP BY	                                                    ORDER BY
1.	Group by statement is used to group the rows that have the same value.	Whereas Order by statement sort the result-set either in ascending or in descending order.
2.	It may be allowed in CREATE VIEW statement.	                            While it does not use in CREATE VIEW statement.
3.	In select statement, it is always used before the order by keyword.	    While in select statement, it is always used after the group by keyword.
4.	Attribute cannot be in the group by statement under aggregate function.	Whereas in order by statement, attribute can be under aggregate function.
5.	In group by clause, the tuples are grouped based on the similarity between the attribute values of tuples.	Whereas in order by clause, the result-set is sorted based on ascending or descending order.
6.	Group by controls the presentation of tuples(rows).	                    While order by clause controls the presentation of columns.

select address from employees
	where address in ('Elgin') AND ('IL');


You can use the WHERE clause to refine your query results.
You can use the wildcard character (%) as a substitute for unknown characters in a pattern.
You can use BETWEEN ... AND ... to specify a range of numbers.
You can sort query results into ascending or descending order, using the ORDER BY clause to specify the column to sort on.
You can group query results by using the GROUP BY clause. 

LIKE	
        SELECT column1, column2, ... 
        FROM table_name 
        WHERE columnN 
        LIKE pattern;
BETWEEN	
        SELECT column_name(s) 
        FROM table_name 
        WHERE column_name 
        BETWEEN value1 AND value2;
ORDER BY	
        SELECT column1, column2, ... 
        FROM table_name 
        ORDER BY column1, column2, ... ASC|DESC;
GROUP BY	
        SELECT column_name(s) 
        FROM table_name 
        WHERE condition 
        GROUP BY column_name(s) 
        ORDER BY column_name(s);





BUILT-IN DATABASE FUNCTIONS:
    Aggregate/Column Functions 
        -takes a collection of like values, such as all of the values in a 
            column, as input, and returns a single value or null
        -ex, SUM(), MIN()(, AVG(), MAX()
        -SUM()
            -adds all the functions in a column 
            SELCECT SUM(column_name)
            -renaming new column from SUM()
             select SUM(column_name) AS New_Column_Name FROM table_name 
        ex. 
            SELECT MIN(column_name) FROM table_name WHERE other_column = 'thing_from_column_name'
**********************************************************************************************************
        perform mathematical operations between columns, and then apply aggregate functions on them
        select AVG(COST/QUANTITY) 
            from PETRESCUE 
            where ANIMAL = 'Dog'.

        SCALAR AND STRING FUNCTION:
            Scalar-
                Round(), Length(), Ucase, Lcase
            SELECT ROUND(column_name)
                FROM table_name

            String Functions(var and varchar):
                SELECT LENGTH(column_name) (gives the len of char in cell down column)
                    FROM table_name 

                UCASE, LCASE:
                    SELECT UCASE(column_name)
                        FROM table_name # returns all of string in upper case 

                    SELECT * FROM table_name
                        WHERE LCASE(column_name)='LOL' 
                        # will find and return all that are at all lower case 
                            ex. Lol, lol, LoL, lOl 

                    SELECT DISTINCT(UCASE(column_name))
                        FROM table_name 

    DATE AND TIME SQL FUNCTIONS:
        DB2 has 
         Functions exist to extract the year() day()(, month()), dayofmonth(), 
            dayofweek(), dayofyear(), week(), hour(), minute(), and second()
            Date: YYYYMMDD 8 DIGITS 
            Time: HHMMSS 6 DIGITS 
            TimeStamp: YYYYDDHHMMSSZZZZZZ 20 DIGITS 
                Timestamp has 20 digits: year, month, day, hour, minute, seconds, and 
                    microseconds where double X represents month and six Zs or Zs 
                    represents microseconds. 

            SELECT DAY(day/time_column) 
                FROM table_name
                WHERE column_name='Cat';

            # get the number of rescues during the month of may
            SELECT COUNT(*)
            FROM table_name
            WHERE MONTH(day/time_column) = '05';

            # Enter a function that displays the number of 
                rescues on the 5th month.
            select SUM(QUANTITY) FROM PETRESCUE 
            WHERE MONTH(RESCUEDATE)='05';

            # Enter a function that displays the number of rescues on the 14th day of the month.
            select SUM(QUANTITY) from PETRESCUE 
            where DAY(RESCUEDATE)='14';

            # Date or Time Arithmetic
            SELECT (day/time_column + 3 DAYS)
            FROM table_name;

            # Animals rescued should see the vet within three days of arrivals. Enter a function 
                that displays the third day from each rescue.
            select (RESCUEDATE + 3 DAYS) 
            from PETRESCUE;

            # Find how many days have passed since each rescue date till now
            SELECT (CURRENT_DATE - day/time_column) 
            FROM table_name;

SUB-QUERIES AND NESTED SELECTS:

    How does a typical Nested SELECT statement syntax look?

        SELECT column_name [, column_name ]
        FROM table1 [, table2 ]
        WHERE column_name OPERATOR
            (SELECT column_name [, column_name ]
            FROM table1 [, table2 ]
            WHERE condition);

    Sub-queries or sub selects:
        -can overcome some of the limitations of aggregate functions
        -like regular queries but placed within parentheses and nested inside another query. 
        SELECT column1 FROM table1
            WHERE column2 = (SELECT MAX(column2) FROM table1)

        retrieve list of employees who earn more than the average salary    
            SELECT * FROM EMPLOYEES 
                WHERE salary > AVG(salary) 
            # above would not work 
            # below would work  
            SELECT emp_id, f_name, l_name, salary   
                FROM employees
                WHERE salary < (SELECT AVG(salary) FROM employees);
    
        COLUMN EXPRESSIONS:
            -when sub queries are used in other parts of query 
                -in the list of columns to be selected 

            # Sub Query in List 
            SELECT emp_id, salary,
                (SELECT AVG(salary) FROM employees)
                    AS AVG_SALARY
                FROM employees;

            # Execute a Column Expression that retrieves all employees records with EMP_ID, 
                SALARY and maximum salary as MAX_SALARY in every row.
            SELECT EMP_ID, SALARY,
                (SELECT MAX(SALARY) FROM EMPLOYEES)
                    AS MAX_SALARY
                    FROM employees;
        
        
        DERIVED TABLES/TABLE EXPRESSIONS:
            - outer query uses the results of the sub-query as a data source
            -***********************
            -derived tables can prove to be powerful in more complex situations such as when 
                working with multiple tables and doing joins *****************
                ***************************************
            # Sub Query FROM 
                SELECT * FROM 
                    (SELECT emp_id, f_name, l_name, DEP_ID
                        FROM employees) AS emp4all;

            # Execute a Table Expression for the EMPLOYEES table that excludes columns with sensitive 
                employee data (i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY).
            select * from 
                ( select EMP_ID, F_NAME, L_NAME, DEP_ID from employees) 
                AS EMP4ALL;

WORKING WITH MULTIPLE TABLES:
    You can access multiple tables with:
        -Sub-queries
        -Implicit JOIN
        -JOIN operators (INNER JOIN, OUTER JOIN, etc.)

         Select * from employees
            where dep_ID IN 
            (select dept_ID_dep from departments where loc_ID = 'L0002');

        # retrieve the department ID and department name for employees who earn more than $70,000. 
        SELECT DEPT_ID_DEP, DEP_NAME FROM DEPARTMENTS
            WHERE DEPT_ID_DEP IN 
                (SELECT DEP_ID FROM EMPLOYEES
                 WHERE SALARY > 70000);

        IMPLICIT JOIN:

            How does an Implicit version of INNER JOIN statement syntax look?
                SELECT column_name(s)
                FROM table1, table2
                WHERE table1.column_name = table2.column_name;

            How does an Implicit version of CROSS JOIN (also known as Cartesian Join) statement syntax look?
                SELECT column_name(s)
                FROM table1, table2;
            -full join or Cartesian Join 
                - select *  from employees, departments;

            -limiting result set 
                select * from employees, departments    
                    where employees.DEP_ID =
                          departments.DEPT_ID_DEP;

            -using shorter ALIASES 
                select * from employees E, department D 
                    where E.DEP_ID = D.DEPT_ID_DEP;

                # this alias also works 
                select E.EMP_ID, D.DEPT_ID_DEP from 
                    employees E, departments D 
                    where E.DEP_ID = D.DEPT_ID_DEP;

            # see the department name for each employee:
                select EMP_ID, DEP_NAME
                    from employees E, departments D 
                    where E.DEP_ID = D.DEPT_ID_DEP;

            # Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
                Solution
                select * from employees where JOB_ID IN (select JOB_IDENT from jobs);
                # I wrote below and it worked same as above 
                select * from EMPLOYEES, jobs 
                    where employees.job_id = 
                        jobs.job_ident;

            # Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.
                select * from employees where JOB_ID IN (select JOB_IDENT from jobs where JOB_TITLE= 'Jr. Designer');

            # Retrieve JOB information and who earn more than $70,000.
                select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT 
                    from jobs 
                    where JOB_IDENT 
                    IN (select JOB_ID from employees 
                        where SALARY > 70000 ); 

            # Retrieve JOB information and whose birth year is after 1976.
                select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT 
                    from jobs 
                    where JOB_IDENT
                    in ( select JOB_ID from employees 
                        where YEAR(B_DATE)>1976);

            # Retrieve JOB information for female employees whose birth year is after 1976.
                select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT 
                    from jobs
                    where JOB_IDENT
                    in (select JOB_ID FROM employees 
                    	WHERE YEAR(B_DATE)>1976 
                    	AND SEX='F');

            # Perform an implicit cartesian/cross join between EMPLOYEES and JOBS tables.
                select * from employees, jobs;
            
            # Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table. 
                select * from employees E, jobs D 
                    where E = D;

            # Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
                select * from employees, jobs where employees.JOB_ID = jobs.JOB_IDENT;

            # Redo the previous query, but retrieve only the Employee ID, Employee Name and Job Title.
                select EMP_ID, F_NAME, L_NAME, JOB_TITLE 
                    from employees E, jobs J 
	                where E.JOB_ID = J.JOB_IDENT;

            # Redo the previous query, but specify the fully qualified column names with aliases in the SELECT clause.
                select E.EMP_ID,E.F_NAME,E.L_NAME, J.JOB_TITLE 
                    from employees E, jobs J 
                    where E.JOB_ID = J.JOB_IDENT;

            # renaming columns in output    
                select EMP_ID i, F_NAME f, L_NAME l, JOB_TITLE jt
                        from employees E, jobs J 
                        where E.JOB_ID = J.JOB_IDENT;

    SUMMARY AND HIGHLIGHTS:
        Most databases come with built-in functions that you can use in SQL statements to perform operations on 
            data within the database itself.
        When you work with large datasets, you may save time by using built-in functions rather than first retrieving the 
            data into your application and then executing functions on the retrieved data.
        You can use sub-queries to form more powerful queries than otherwise.
        You can use a sub-select expression to evaluate some built-in aggregate functions like the average function. 
        Derived tables or table expressions are sub-queries where the outer query uses the results of the sub-query as a data source.

    SQL Cheat Sheet: FUNCTIONS and Implicit JOIN
            COUNT	        SELECT COUNT(column_name) 
                                FROM table_name 
                                WHERE condition;
            AVG	            SELECT AVG(column_name) 
                                FROM table_name 
                                WHERE condition;
            SUM	            SELECT SUM(column_name) 
                                FROM table_name 
                                WHERE condition;
            MIN	            SELECT MIN(column_name)     
                                FROM table_name 
                                WHERE condition;
            MAX	            SELECT MAX(column_name) 
                                FROM table_name 
                                WHERE condition;
            ROUND	        SELECT ROUND(2number, decimals, operation) 
                                AS RoundValue;
            LENGTH	        SELECT LENGTH(column_name) 
                                FROM table;
            UCASE	        SELECT UCASE(column_name) 
                                FROM table;
            DISTINCT	    SELECT DISTINCT(column_name) 
                                FROM table;
            DAY	            SELECT DAY(column_name) 
                                FROM table
        CURRENT DATE	    SELECT (CURRENT DATE - COLUMN) 
                                FROM table;
        Subquery	        SELECT column_name [, column_name ] 
                                FROM table1 [, table2 ] 
                                WHERE column_name OPERATOR (SELECT column_name [, column_name ] 
                                FROM table1 [, table2 ] [WHERE])
        Implicit Inner Join	SELECT column_name(s) 
                                FROM table1, table2 
                                WHERE table1.column_name = table2.column_name;
        Implicit Cross Join	SELECT column_name(s) 
                                FROM table1, table2;

QUESTIONS 
Which of the following statements about built-in database functions is correct?
Built-in database functions reduce the amount of data that is retrieved.

Which of the following SQL queries would return the day of the week each dog was rescued?
SELECT DAYOFWEEK(RescueDate) From PetRescue WHERE Animal = ‘Dog’;

What is the result of the following query: SELECT (Current_Date – RescueDate) FROM PetRescue
Returns how long it has been since each resc

Which of the following queries will return the employees who earn less than the average salary?
SELECT * FROM Employees WHERE Salary < (SELECT AVG(Salary) FROM Employees);

What are the three ways to work with multiple tables in the same query?
Sub-queries, Implicit joins, JOIN operators

QUESTIONS:
Question 1
Which of the following queries will return the data for employees who belong to the department with the highest value of department ID.
SELECT * FROM EMPLOYEES WHERE DEP_ID = 
      ( SELECT MAX(DEPT_ID_DEP) FROM DEPARTMENTS ) 

Question 2
A DEPARTMENTS table contains DEP_NAME, and DEPT_ID_DEP columns and an EMPLOYEES table contains columns called F_NAME and DEP_ID. We want 
    to retrieve the Department Name for each Employee. Which of the following queries will correctly accomplish this?
    SELECT F_NAME, DEP_NAME 
        FROM EMPLOYEES, DEPARTMENTS 
        WHERE DEPT_ID_DEP = DEP_ID;


Question 3
You are writing a query that will give you the total cost to the Pet Rescue organization of rescuing animals. The cost of each rescue is 
    stored in the Cost column. You want the result column to be called “Total_Cost”. Which of the following SQL queries is correct?
SELECT SUM(Cost) 
    AS Total_Cost 
    FROM PetRescue;









ACCESSING DATABASES USING PYTHON:

     Python ecosystem is very rich and provides easy to use tools for data science. Some of the most popular packages are 
        NumPy, pandas, matplotlib, and SciPy.
     Python supports relational database systems
      Python code connects to the database using API calls.
      ease of use
      portable
      DB API 
      

     Python DB API 
     Notebooks 
        Mathematica notebook, 
        Maple worksheet, 
        Matlab notebook, 
        IPython Jupyter, 
        R Markdown, 
        Apache Zeppelin, 
        Apache Spark notebook,
        Databricks cloud

         Jupyter notebook is an 
            -open source web application that allows you to 
            -create and share documents that contain 
            -live code, equations, visualizations, and narrative texts
            -Supports 40 programming languages 
            -R, Julia, and Scala. Notebooks can be shared with others by email, Dropbox,
                 GitHub, and the Jupyter notebook viewer
            - interactive output HTML, images, videos, LaTex, and customized types.   
            -share Notebooks
            -interactive output 
            -big data integration  
        
        SQL API
            -connect
            -send
            -execute 
            -status check 
            -ok 
            -disconnect 
            -function calls as an application programming interface, API, for the DBMS
            -application program calls functions in the API, and it calls other functions
                 to retrieve query results and status information from the DBMS
            -he application program begins its database access with one or more API calls 
                that connect the program to the DBMS.
            -To send the SQL statement to the DBMS, the program builds the statement as a 
                text string in a buffer and then makes an API call to pass the buffer contents to the DBMS. 
            -The application program makes API calls to check the status of its DBMS request and to handle errors. 
            - The application program ends its database access with an API call that disconnects it from the database. 

            MySQL C API provides low level access to the MySQL client server protocol and enables C programs to access database contents.
            psycopg2 API connects Python applications in PostgreSQL databases
            IBM_DB API is used to connect Python applications to IBM DB2 databases
            dblib API is used to connect to SQL server databases.
            ODBC is used for database access for Microsoft Windows OS. 
            OCI is used by Oracle databases.
            JDBC is used by Java applications. 

    WRITING CODE USING DB-API 
        DB API 
            -pythons standard api for accessing relational databases 
            -allows a single program to work with multiple kinds of relational databases 
            -learn DP-API functions once, use them with any database 
            -easy to implement and understand 
            -encourages similarity between the python modules used to access databases 
            -achieves consistency 
            -portable across databases 
            -broad reach of database connectivity from python 

            ibm db2     IBM_DB
            MYSQL       mysql connector/python
            PostgreSQL  psycopg2
            MongoDB     PyMongo 

           TWO MAIN CONCEPTS
                connection object
                    -database connections 
                    -manage transactions 
                        CONNECTION METHOD 
                            .cursor()
                            .commit()
                            .rollback()
                            .close()

                query objects/cursor objects 
                    -database queries 
                    -scroll through result set 
                    -retrieve results 
                        CURSOR METHOD 
                            .callproc()
                            .execute()
                            .executemany()
                            .fetchone()
                            .fetchmany()
                            .fetchall()
                            .nextset()
                            .arraysize()
                            .close()
                    -database cursor 
                        - control structure that enables traversal over the records in a database 
                        -It behaves like a file name or file handle in a programming language.
                        -Just as a program opens a file to access its contents, it opens a cursor to gain 
                            access to the query results.
                        - the program closes a file to end its access and closes a cursor to end access to 
                            the query results.
                        -  keeps track of the program's current position within an open file, a cursor keeps 
                            track of the program's current position within the query results


CREATING TABLES, LOADING DATA AND QUERYING DATA remotely with Python for db2

    Creating Table: 
        ibm_db.exec_immediate()
            parameters: conn = connection, statement, options 
            stmt = ibm_db.exec_immediate(conn, "Put in SQL statement here;")

    Fetching data:
        -think of fretching as returning data 
        dict = ibm_db.fetch_both(stmt) # this would return a dict 

    Using Pandas to retrieve data from db2 
        
n this reading, you will learn about the SQL magic commands.
Jupyter notebooks have a concept of Magic commands that can simplify working with Python, and are particularly 
    useful for data analysis. Your notebooks can have two types of magic commands:
Cell magics: start with a double %% sign and apply to the entire cell
Line magics: start with a single % (percent) sign and apply to a particular line in a cell
Their usage is of the format:
%magicname arguments
So far in the course you learned to accessed data from a database using the Python DB-API (and specifically ibm_db). With 
    this API execution of queries and fetching their results involves multiple steps. You can use the SQL Magic commands to 
    execute queries more easily.
For example if you want to execute the a query to select some data from a table and fetch its results, you can simply enter a 
command like the following in your Jupyter notebook cell:
%sql select * from tablename
Although SQL magic simplifies working with databases, it has some limitations. For example, unlike DB-API, there are no explicit 
    methods to close a connection and free up resources.