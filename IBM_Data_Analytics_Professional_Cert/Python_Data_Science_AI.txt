You can slice a variable that has a nested lists or tuples with [][]
List 
    syntax to clone a variable
        variable = OtherVariable[:]
.split() - can use delimiter for the split 
.index() - to find the index of a known element in list, tuple, ....
sorted() - sorted(SomeList) -this will also turn a tuple into a list

Dictionary
    You can access elements in a dictionary if you know the key by Dict['known_key']

    del(Dict['known_key'])
    'known_key' in Dict  # finds if the 'known_key' is in the dictionary
        True or False response

# Append value with key into dictionary

release_year_dict['Graduation'] = '2007'
release_year_dict

Sets
    -unordered
    -sets do not have element positions
    -only 1 element of a set can exist, meaning no duplicates
    -{} curly brackets
    -convert list to set 
    -set(my_list)
    - to add variable.add(thing_to_add)
    - to remove variable.remove(thing_to_add)
    - 'item' in variable_set
        -returns bool
    - & to find the intersection of 2 sets 
        variable_intersection = variable1&variable2
    - finding a subset 
        variable.issubset(otherVariable)
            -returns a bool
    - fiinding the Difference
        -variable.difference(variable2)
    - Union 
        variable.union(OtherVariable)
    - SuperSet 
        set(variable).issuperset(OtherVariable)


Conditions and Branching
    Comparison Operators return a boolean
        Or
            false, false = false
            false, true = true
            true, false = true
            true, true = true
        and
            false, false = false
            false, true = false
            true, false = false
            true, true = true 
        not
            false, true
            false, true 

    Range:
        -think of it as an unordered list
    For:
        -enables you to execute a code block multiple times
        - exx if you want to print out every element in a list

    Loops:
        enumerate - iterate through a list and provides the index of each element
            for iterator,variable in enumerate(variable):
        Also
            for i,x in enumerate(['A','B','C']):
                print(i,x)

    While Loops:
        variable = ['foo', 'bar', 'stuff', 'foo']
        new_variable = []
        iterator = 0
        while(variable[iterator]=='foo'):  # will exit on slice 1 cause it's bar not foo
            new_variable.append(variable[iterator])
            iterator = iterator + 1

# While Loop Example

dates = [1982, 1980, 1973, 2000]
i = 0
year = dates[0]

while(year != 1973):    
    print(year)
    i = i + 1
    year = dates[i]
    
print("It took ", i ,"repetitions to get out of loop.")

Functions:

    printing a stand alone function will not make it return function()
    calling a function by using print print(function())
        will on return what is after return
    
    def print_stuff(stuff):
        for i,s in enumerate(stuff):  # this prints an index as i and s as whatever stuff you pass
            print('album', i, 'Rating is', s)
        
        album_ratings = [10,8.5,9.5]
        printStuff(album_ratings)

        album 0 Rating is 10

    SCOPE:
        -scope of a variable is the part of the program where that variable is accessible.
        -Variables that are defined outside of any function are said to be within the global 
            scope, meaning they can be accessed anywhere after they are defined

        Global Variables -  Variables that are defined outside of any function are said to be 
            within the global scope, meaning they can be accessed anywhere after they are defined

        Local Variables - are variables inside the function
    *****If local variable is in function Python will automatically go outside 
            We can assign a global variable by using word global inside a function 
    
    Exception Handling:
        try:
            pass
        except IOErrot:
            print("Print something useful here.") 
        else: # this would be a basic catch all 
            print("Something went wrong.")
        finally:
            print("C
            ode to execute at the end of the try except no matter what.")

        You can have multiple excepts with **kwargs

    Objects and Classes:
        Types of built in classes 
            int, float, str, list, dict, bool and each is an object
                Every object has the following: a type, internal representation,
                 a set of functions called methods to interact with the data. 

    Class to Object to Data Attribute to Method Attribute
    Instance -instances
     of an object 
    dir() gives you data and method attributes

    variable gets passed in circle class and circle class instantiates the variable


Opening Files:
    .open('selected_file, 'mode') # mode r for reading(.txt), w writing, a appending #file is a object
    selected_file.name # gives the name of file

    Use with open('selected_file', 'mode') as file1: # better and will automatically close file
        file_stuff = file1.read('optional number of characters to read here')
        print(file_stuff)
    print(file1.closed)
    print(file_stuff)
    .readlines() # outputs lines of file as a list 
        # if you use this again in exact same manner it will print the 2nd line of file 

# Iterate through the lines

with open(example1,"r") as file1:
        i = 0;
        for line in file1:
            print("Iteration", str(i), ": ", line)
            i = i + 1

# Read all lines and save as a list

with open(example1, "r") as file1:
    FileasList = file1.readlines()

# Write line to file
exmp2 = 'Example2.txt'
with open(exmp2, 'w') as writefile:
    writefile.write("This is line A")

# Read file
with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())

# Check whether write to file
with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())

# Sample list of text
Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]
Lines

# Write the strings in the list to text file
with open('Example2.txt', 'w') as writefile:
    for line in Lines:
        print(line)
        writefile.write(line)

# Verify if writing to file is successfully executed
with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())

# However, note that setting the mode to w overwrites all the existing data in the file.
with open('Example2.txt', 'w') as writefile:
    writefile.write("Overwrite\n")
with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())
    
# Write a new line to text file 'a' is to appenda line
with open('Example2.txt', 'a') as testwritefile:
    testwritefile.write("This is line C\n")
    testwritefile.write("This is line D\n")
    testwritefile.write("This is line E\n")

It's fairly ineffecient to open the file in a or w and then reopening it in r to read any lines. 
Luckily we can access the file in the following modes:

r+ : Reading and writing. Cannot truncate the file.
w+ : Writing and reading. Truncates the file.
a+ : Appending and Reading. Creates a new file, if none exists. You dont have to dwell on the specifics 
of each mode for this lab.

******************************************************************************
Most of the file methods we've looked at work in a certain location in the file. .write()  writes at a 
certain location in the file. .read() reads at a certain location in the file and so on. You can think 
of this as moving your pointer around in the notepad to make changes at specific location.
####################################################################################
Opening the file in w is akin to opening the .txt file, moving your cursor to the beginning of the text file, 
writing new text and deleting everything that follows. Whereas opening the file in a is similiar to opening the 
.txt file, moving your cursor to the very end and then adding the new pieces of text.
It is often very useful to know where the 'cursor' is in a file and be able to control it. The following methods 
allow us to do precisely this -

.tell() - returns the current position in bytes
.seek(offset,from) - changes the position by 'offset' bytes with respect to 'from'. From can take the value of 
    0,1,2 corresponding to beginning, relative to current position and end
     seek() function is used to change the position of the File Handle to a given specific position. File handle 
     is like a cursor, which defines from where the data has to be read or written in the file.


with open('Example2.txt', 'a+') as testwritefile:
    print("Initial Location: {}".format(testwritefile.tell()))
    
    data = testwritefile.read()
    if (not data):  #empty strings return false in python
            print('Read nothing') 
    else: 
            print(testwritefile.read())
            
    testwritefile.seek(0,0) # move 0 bytes from beginning.
    
    print("\nNew Location : {}".format(testwritefile.tell()))
    data = testwritefile.read()
    if (not data): 
            print('Read nothing') 
    else: 
            print(data)
    
    print("Location after read: {}".format(testwritefile.tell()) )

Initial Location: 115
Read nothing

New Location : 0
Overwrite
This is line C
This is line D
This is line E
This is line C
This is line D
This is line E
This is line E

Location after read: 115

Finally, a note on the difference between w+ and r+. Both of these modes allow access to read and write methods, 
however, opening a file in w+ overwrites it and deletes all pre-existing data.
To work with a file on existing data, use r+ and a+. While using r+, it can be useful to add a .truncate() method 
at the end of your data. This will reduce the file to your data and delete everything that follows.
In the following code block, Run the code as it is first and then run it with the .truncate().

with open('Example2.txt', 'r+') as testwritefile:
    data = testwritefile.readlines()
    testwritefile.seek(0,0) #write at beginning of file
   
    testwritefile.write("Line 1" + "\n")
    testwritefile.write("Line 2" + "\n")
    testwritefile.write("Line 3" + "\n")
    testwritefile.write("finished\n")
    #Uncomment the line below
    #testwritefile.truncate()
    testwritefile.seek(0,0)
    print(testwritefile.read())

Line 1
Line 2
Line 3
finished
is line D
This is line E
This is line C
This is line D
This is line E
This is line E

# Copy file to another
with open('Example2.txt','r') as readfile:
    with open('Example3.txt','w') as writefile:
          for line in readfile:
                writefile.write(line)

# Verify if the copy is successfully executed
with open('Example3.txt','r') as testwritefile:
    print(testwritefile.read())


PANDAS 
    Reading Excel file  
        
            !pip install xlrd
            !pip install openpyxl

xlsx_path = 'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%204/Datasets/TopSellingAlbums.xlsx'
df = pd.read_excel(xlsx_path)

    You can make a dataframe with a dictionary  
        dict = {'column1' : ['rows', 'under', 'column'], 'column2':['rows', 'under', 'column']}
        df = pd.DataFrame(dict) # turning dict into dataframe 

    Accessing column    
        var = df[['column1']] # makes new dataframe
    How would you access the first-row and first column in the dataframe df?
        df.ix[0,0]

    Saving Data:
        Listing Unique elements:
            df['column1'].unique() # gives only unique elements(rows under column) in dataframe
            
            df.to_csv('name_you_want.csv')

    Series
        To view the column as a series, just use one bracket:
            var = df['column']
    DataFrame
        var = df[['column']]
    .loc
        loc[row_label, column_label]
        # Access the column using the name
            df.loc[0, 'Salary']
    .iloc
        iloc[row_index***stops before last number, column_index]

        Access the 2nd row and the 3rd column of df
            df.iloc[1, 2]
    .set_index('column_you_want')
        df2=df
        df2=df2.set_index("Name")
    Slicing:
        here the start represents the index from where to consider, and stop represents the index one 
            step BEYOND the row you want to select. You can perform slicing using both the index and 
            the name of the column.
        It means you are telling Python to start at index 0 and select rows 0, 1, 2 up to but not including 3
        Indexing by labels(i.e. using loc()) differs from indexing by integers (i.e. using iloc()). With loc(), 
            both the start bound and the stop bound are inclusive. When using loc(), integers can be used, but the 
            integers refer to the index label and not the position.
        data[start:stop]

        # let us do the slicing using old dataframe df
            df.iloc[0:2, 0:3]
        #let us do the slicing using loc() function on old dataframe df where index column is having labels 
                as 0,1,2
            df.loc[0:2,'ID':'Department']
        #let us do the slicing using loc() function on new dataframe df2 where index column is 
                Name having labels: Rose, John and Jane
            df2.loc['Rose':'Jane', 'ID':'Department']
        # Access the 2nd row and the 3rd column of df
            df.iloc[1, 2]

# Add new row to specifig index name
df2 = df.append(pd.DataFrame([new_row],index=['7'],columns=df.columns))

import pandas as pd
import numpy as np
 
column =['a', 'b', 'c', 'd', 'e']
index =['A', 'B', 'C', 'D', 'E']
  
# create a dataframe of random values of array
df1 = pd.DataFrame(np.random.rand(5, 5),
       columns = column, index = index)
 
column =['a', 'b', 'c', 'g', 'h']
 
# create the new index for columns
print(df1.reindex(column, axis ='columns', fill_value ='data missing'))

# Use the following list to convert the dataframe index df to characters and assign it to df_new; 
# find the element corresponding to the row index a and column 'Artist'. Then select the rows a 
# through d for the column 'Artist'
new_index=['a','b','c','d','e','f','g','h']
df_new=df
df_new
df_new.index=new_index
df_new
df_new.loc['a', 'Artist']
df_new.loc['a':'d', 'Artist']

NUMPY:
        np.arry([])
    dtype- gives us data type in array
    a.size
    a.ndim - array dimensions
    a.shape - gives both size and dimension

    Indexing and Slicing:
        [start:end:step]

        arr = np.array([1, 2, 3, 4, 5, 6, 7])
        print(arr[1:5:2])
        [, 4] # output

        arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
        even = arr[1:8:2]
        even
        array([2,4,6,8])
        odd = arr[0:8:2]
        odd
        array([1,3,5,7])

        select = [0, 2, 3, 4]
        d = [100,   2, 300, 400]
        d = c[select]
        d
        array([100,   2, 300, 400])
        c[select] = 100000
        c
        array([100000,      1, 100000, 100000, 100000])

        a[1:4] - selects index 1-3 NOT 4

    Basic Operations:
        Vector Add and Subtract 
            its like operating horizontally to create a new vector
            arr1 + arr2
            arr3 = np.add(arr1, arr2)
            ##BOTH OF ABOVE OUPUT SAME THING IN JUPYTER
            arr3 = np.subtract(arr1, arr2)
            arr3

        Array Multiplication with a Scalar:
            y=1/2 looks like a fraction
            z=2y= 2*1/2*2 = 2/4
            arr3 = np.multiply(arr1, arr2)
            arr3

        Product of 2 Numpy Arrays:
            u= 1/2 v=3/2
            z = u teenyCircle v 
            z = 1*3/2*2
            it multiplies straight across/at equal indexes
            arr3 = np.divide(arr1, arr2)
            arr3

        Dot Product:
            np.dot(array1, array2)
            u = (1*3)+(2*1) = 5
            arr3 = np.dot(arr1, arr2)
            arr3

        Adding Constant to an Numpy Array:
            adds 1 to all elements of array, known as BROADCASTING
            z = u + 1
            arr + 1

        Universal Function:
            .mean()
            .max()
            .min()
            .sin()
            .pi()
            .linspace(start, stop, num=int)
                (-2, 2, 5) = gives 5 intervals between -2 and 2
                (-2, 2, 9) = gives 9 intervals between -2 and 2
                    -2, -1.5, -1 ...., 2

                generates 

        Plotting Mathematical Functions:
        Using Jupyter Notebook
        import matplotlib.pyplot as plt 
            .linspace()
            x=np.linspace(0, 2*np.pi,100)
            y=np.sin(x)
            matplotlibinline
            plt.plot(x, y)

### I stopped at linspace in Lab

TWO Dimensional Numpy Array:
    element - is same as a cell in excel 
    np.ndim(var) - rank, number of nested lists, as last index row if 3 rows then it outputs 2
    np.shape(var) - returns tuple (number of rows/lists, size of each list)
    np.size(var) - total number of elements 

    Accessing -[rows, columns]
        aceessing an element/cell   
            var[row, column] also and = var[1][2]
    Slicing - [row, column]
        var[0:2, 2] # accesses first 2 rows on 2nd column
        var{1, 0:2] # access row 1 columns 0 and 1


    Matrix Multiplication   
        np.dot(var) # Yo this is cool but need to study more 
        multiplying a row(s) or column(s) 


SIMPLE APIs
    Pandas is a type of api 
    Rest apis:
        REpresentational
        State 
        Transfer 

        Client 
            -can be called a wrapper 
            -you or your code 
            -PyCoinGecko 
        Resource 
            -the webstuff you want 
            -also known as endpoint 
        Can use HTTP to transfer the data back and forth
            -usually contaings JSON file 
        API has set rules 
            -communication
            -Input or Request 
            -Output or Response 
        API Key 
            -usually happens in first call to api 
            -authorizes user 

            PyCoinGecko
         pip install PyCoinGecko
         from pycoingecko import CoinGeckoAPI
         cg = CoinGeckoAPI()
         bitcoin_data = cg.get_coin_maket_chart_by_id(id='bitcoin', vs_currency='usd', days=30)
        # this returns a dict of nested lists 

        #converting to dataframe 
        data = pd.DataFrame(bitcoin_price_data, columns=['TimeStamp', 'Price'])

        # appending timestamp column to data 
        data['Date'] = pd.to_datetime(data['TimeStamp], unit='ms')

        # creating a candlestick plot 
        candlestick_data = data.groupby(data.Date.dt.date).agg({'Price: ['min, 'max', 'first', 'last']})


        REST APIs & HTTP Requests Part 1:
        EXCELLENT RESOURCE 
            https://realpython.com/api-integration-in-python/
            HTTP method	Description
                GET	    Retrieve an existing resource. READ-ONLY Operation 
                POST	Create a new resource.
                PUT	    Update an existing resource.
                PATCH	Partially update an existing resource.
                DELETE	Delete a resource.

            Request Module in Python
                allows you to send HTTP/1.1 requests easily. 
            GET Request /get, create query string 
                    DOES NOT have a body 
                    url_get=requests.get'http://website_I_want.org/get'
                   
            Query String 
                    dict={'stuff':'the_stuff','more_stuff','other_stuff'}
                    r=requests.get(url_get,params=dict)
            Post Requests 
                    ONLY only the POST request has a body:
                    url_post='http://website_I_want.org/post 
                    dict={'stuff':'the_stuff','more_stuff','other_stuff'}
                    r_post=requests.post(url_post,data=dict)
                 used to send data to a server, but the POST request 
                    sends the data in a request body, not the url.
                In order to send the Post Request in the URL, we 
                    change the route to POST
            httplib module in Python 
            urllib module in Python 
            User makes a request that gets turned into HTTP in a JSON File
            Server finds info and sends in back in HTTP in a JSON File 
                Resources in Website JSON 
                    index.html
                    image.png 
                    file.txt 
            Request and Responses Process 
                Request Start line 
                    http 
                    version number 
                Request Header 
                    print(r.request.headers)
                    Apache-Cache 
                    contains info 
                Request body 
                    sometimes 
                    contains requested file 
                Response Object
                    An image is a response object that contains the image as a bytes-like object. 
                        As a result, we must save it using a file object.
                        First, we specify the file path and name
                        path=os.path.join(os.getcwd(),'image.png')
                        path
                        '/resources/labs/image.png'
                        We save the file, in order to access the body of the response we use the attribute 
                        content then save it using the open function and write method:
                            with open(path,'wb') as f:
                                f.write(r.content)
                        We can view the image:
                            Image.open(path)  
                Status Code 
                    Code	Meaning	            Description
                    200	    OK	                The requested action was successful.
                    201	    Created	            A new resource was created.
                    202	    Accepted	        The request was received, but no modification has been made yet.
                    204	    No Content	        The request was successful, but the response has no content.
                    400	    Bad Request	        The request was malformed.
                    401	    Unauthorized	    The client is not authorized to perform the requested action.
                    404	    Not Found	        The requested resource was not found.
                    415	    Unsupported Media Type	The request data format is not supported by the server.
                    422	    Unprocessable Entity	The request data was properly formatted but contained invalid or missing data.
                    500	    Internal Server Error	The server threw an error when processing the request.

                    Code range	    Category
                    2xx	            Successful operation
                    3xx	            Redirection
                    4xx	            Client error
                    5xx	            Server error
                    request status code r.status_code
                     the 100s are informational responses; 
                        100 indicates that everything is OK so far. 
                    200s are Successful responses: 
                        200 The request has succeeded. 
                    300s
                        Redirection
                        Multiple Choices 
                    400s is bad news. 
                        401 means the request is unauthorized. 
                        403 Forbidden
                     500’s stands for server errors, like 501 for not Implemented.
                        500 Server Error 
                        501 Not implemented  
            HTTP:
            To help clarify this, take a look at the table below. In this table, you’ll 
            see API endpoints for a hypothetical CRM system. These endpoints are for a 
            customer resource that represents potential customers in the system:

            HTTP method     API endpoint	            Description
            GET	            /customers	                Get a list of customers.
            GET	            /customers/<customer_id>	Get a single customer.
            POST	        /customers	                Create a new customer.
            PUT	            /customers/<customer_id>	Update a customer.
            PATCH	        /customers/<customer_id>	Partially update a customer.
            DELETE	        /customers/<customer_id>	Delete a customer.
                            When an HTTP request is made, an  HTTP method is sent.
                Scheme: 
                    http://
                Internet Address or Base URL
                    www.ibm.com or ww.gitlab.com 
                Route
                    location on the web server 
                        /images/IDSNlogo.png 
                http://www.ibm.com/images/IDSNlogo.png 
            URL:
                REQUEST WITH URL PARAMETERS 
                    url_get='http://httpbin.org/get'
                    payload={"name":"Joseph","ID":"123"}
                    r=requests.get(url_get,params=payload)
                    r.url
                    print("request body:", r.request.body) # There is no request body
                Uniform Resource Locator

Question 1: write  wget 
In the previous section, we used the wget function to retrieve content from the web 
    server as shown below. Write the python code to perform the same task. The code 
    should be the same as the one used to download the image, but the file name should 
    be 'Example1.txt'

url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/Example1.txt'
path=os.path.join(os.getcwd(),'example1.txt')
r=requests.get(url)
with open(path,'wb') as f:
    f.write(r.content)

EXTRA STUFF ON REQUEST-HTTP 
https://requests.readthedocs.io/en/latest/?utm_content=000026UJ&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0101ENSkillsNetwork1005-2022-01-01&utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_term=10006555
           
HTML FOR WEBSCRAPING
    HTML: Hyper Text Markup Language
        HTML 
            Basics
            Composition
            Trees 
                html doc can be referred to as a document tree 
                    html
                head    body
            title       h3,p,h3,p,h3,p 
                        bold 
            Tables
                table 
                    tr 
                        td    /td 
                        td    /td
                    tr 
                        td    /td 
                        td    /td
                /table 
        Tags tell browser how to display content
            Tag is like a class 
                individual tags are like an instance 
        Doctype
            html
            head
            title 
            /head 

            body 
            p 
            h 
            /body 


            /html 

WEBSCRAPING 
    Requests and Beautiful Soup
    from bs4 import BeautifulSoup
    html="html_we_want_in_nested_data_structure"
    soup = BeaurifulSoup(html, 'html5lib')

    BeautifulSoup Object 
        tag_object = soup.title # html title 
        tag_object = soup.h3 

        Accessing/Finding Objects 
        parent_tag = tag_child.part 
            finding the path to thing 
        Next_sibling Attribute 
            sibling_1 = tag.object.next_sibling 
            sibling_2 = sibling_1.next_sibling
        Navigable String 
            tag.child.string 
        Methods 
            table_row = table.find_all(name='tr') # tr would find data in a table 
                        since tr identifies a table in html 
                -this is a python iterable 
            first_row = table_row[0] # extracting first table cell 
            # iterating through each table cell
            for i, row in enumerate(table_rows):
                print("row", i)
                cells = row.find_all("td")
                for j, cell in enumerate(cells):
                    print("column", j, "cell", cell)