If 

Table = Users
column = name 
Row = email


insert data - INSERT defines a new row by listing the fields we want to include
    followed by the values we want placed in the new row
    INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
    to insert multiple lines of data make sure there is an ; at the end
        ex: INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu') ;
            INSERT INTO Users (name, email) VALUES ('Colleen', 'cvl@umich.edu');
            INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu') ;
            INSERT INTO Users (name, email) VALUES ('Sally', 'a1@umich.edu') ;

delet data - DELETE FROM Users WHERE email='ted@umich.edu'

update data - UPDATE Users SET name="Charles" WHERE email='csev@umich.edu'

retrieve data - SELECT * FROM Users
    retrieve all users that have same email address - SELECT * FROM Users WHERE email="emailaddress.com"

    JOIN Operation - links across several tables as part of a select Operation  
        -must tell JOIN how to use the keys that make the connection between the tables using an ON clause
        -joining 2 tables without  an ON clause gives all possible combinations of rows
            ex: select Album.title, Artist.name from Album join Artist on Album.artist_id=Artiest.independent
                   -what we want to see     -tables that hold data    -How the tables are linked
                https://www.freecodecamp.org/learn/scientific-computing-with-python/python-for-everybody/relational-databases-join-operation


Database design starts with a picture . . . A LITERAL PICTURE

Best Practices - 
    - do not put in the string data more than once
        - you connect things to into    
        - pull duplicate data out into another table
    - ***integer data from foreign keys is ok to repeat******
    - draw a picture
    - columns/attribute with exact same data need to be in a different table 
    - row/tuple
    - Never use your logical key as the primary key
    -Logical keys can and do change, albeit slowly
    -Relationships that are based on matching string fields are less efficient than integers

    Think about the most basic or independent piece of data, the piece of data that is the least similar and branch and connect from there
        -That's the farthest away table
        -Think of it in a 

Three Kinds of Keys
Primary Key - Generally an integer auto-increment field
Logical Key - What the outside world uses for lookup
Foreign Key - generally an integer key pointing to a row in another table

Many to Many Relationships
    -is possibly only 2 foreign key columns
    -