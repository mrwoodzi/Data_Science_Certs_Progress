Scripting In Bash:

Run
    #!/bin/bash # also known as a shebang
        -put this at top of scripting file so you can just run the file like
            .\filname.sh
    sh 
        running in the shell
    bash 
        running in bash

help
    let # view of the potential operators in the terminal 
    man <command> gives information about a command 
        # this works sometimes other times help will work 

echo     
    echo -e "\n  ~~ Countdown Timer \n"
        -don't forget the script -e in the file 

List 
    ls 
    ls -l 
        this gives you long form 
    ls /
        lists what's in the root of the file system
    ls /bin 
        view what's in bin 

Passing Arguements
    $* # from the terminal it will print all arguements passed to it 
            from the terminal 
    echo $? # to view exit status of last command 
    echo $the_you_type_what_you_want_to_print

Permissions
    chmod +x filename.sh 
        -this gives everyone permission to use the file 
            - the x means everyone can use it 


User Input
    read variable_name_user_input_will_be _stored

All Variables in Shell/Bash
    declare -P
        # declare can also be used to create variables 
        # will also show variable user makes 
    var=$(( var - int )) # setting variable with calculation in terminal 

Where is Interpreter 
    which bash 

Permissions
    chmod   -x  <filename>
    [[ -x countdown.sh ]]; echo $?
        -this will check permissions 

Syntax 

QUESTION1="What's your name?"
echo $QUESTION1
read NAME


Boolean 
    help [[
        -type this in the terminal to see the boolean help 
    -eq (equal), -ne (not equal), 
    -lt (less than), 
    -le (less than or equal), 
    -gt (greater than), 
    -ge (greater than or equal)

     Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators:
    
      ( EXPRESSION )    Returns the value of EXPRESSION
      ! EXPRESSION              True if EXPRESSION is false; else false
      EXPR1 && EXPR2    True if both EXPR1 and EXPR2 are true; else false
      EXPR1 || EXPR2    True if either EXPR1 or EXPR2 is true; else false
    
    When the `==' and `!=' operators are used, the string to the right of
    the operator is used as a pattern and pattern matching is performed.
    When the `=~' operator is used, the string to the right of the operator
    is matched as a regular expression.
    
    The && and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.
    
    Exit Status:
        echo $?
            -type in terminal to see the previous exit status
            - [[ 4 -le 5 ]]; echo $?
                -this will print the exit status after you hit enter 
        0 or 1 depending on value of EXPRESSION.
            0 is True but better thought of as zero erros
            Anything but 0 means there was an error with the command

    help    
        help test   
            - type that in the terminal 
        -utilizes the built-in commands


    environment variables 
        printenv - in terminal
        declare -p 
            -view all variables in the shell 


    Comment Out:

                    : '   # make sure there is a space between : '
                    put your comment here 
                    '
                    OR 
                    #comment

(( this uses python boolean))

[[ this uses the -le, -ge]]

if statements 
    if [[ something == something ]]
    then 
        echo something
    fi # this is the reverse of if and closes the if statement 

for loops
    -2 different types  
        -help menu shows the basic format 

sleep 

while
    while [[ CONDITION ]]
    do
        STATEMENTS
    done

Random Number Generator 
    use $RANDOM variable 
    modulus operator to put RANDOM in the number range you want 
    EX.
        $RANDOM%75
