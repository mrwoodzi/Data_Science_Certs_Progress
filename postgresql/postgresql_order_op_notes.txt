SQL Engine Order of Operations: mysql and postgresql 
    Basic Order Of Operations:
        FROM: load data from table(s)
                -subqueries -  CTE
                    -Evaluated before the main query processes data. The result set of this subquery is
                        available for the subsequent operations (e.g., JOIN, GROUP BY)
        WHERE: filter rows
                -subqueries 
                    -Evaluated after the FROM clause and before the main WHERE clause filtering. 
                        The outer query uses the result to determine which rows to include or exclude.
        GROUP BY: group rows - prepares data for aggregation
        Aggregate Functions in various clauses: SUM(), COUNT(), AVG(), COALESCE()
                --HAVING
                --SELECT
                --ORDER BY
        SubQueries:
            -see Order of Operations SubQueries Below
        HAVING: - filter groups based on aggregated results
                -subqueries
                    -Evaluated after the GROUP BY and aggregation, used to filter aggregated results.
        SELECT: - Specify which columns or expressions, including aggregates, to show in the final output.'
                    -subqueries
                        -Evaluated after the FROM clause and any filtering done by the WHERE clause but 
                            before final projection (SELECT) and aggregation (GROUP BY).
        ORDER BY: -Sort the final output (e.g., ascending or descending)
        LIMIT: -Limit the number of rows in the output (not filtering, but restricting the final results)
    
    Order of Operations SubQueries:
            FROM: Evaluated first; provides a derived table for the outer query(CTE using WITH clause) EX: WITH new_temp_table AS (put in subquery here)
            WHERE: Evaluated after FROM and initial filtering; used to determine which rows to include in the outer query.
            SELECT: Evaluated after FROM, WHERE, and GROUP BY; used to provide additional columns or calculations.
            HAVING: Evaluated after GROUP BY and aggregation; filters aggregated results.
            JOIN: Evaluated as part of the join operation with the outer table.
            
    Execution Phases:
        Phase 1: Data Scanning and Filtering: 
            The engine scans the data based on the 
                FROM and WHERE clauses.
                -Most common data sturctures 
                    FROM
                        -hash table, b-trees, sorted arrays
                    WHERE   
                        -b-trees, hash tables
        Phase 2: Grouping and Aggregation: 
            It then groups the data according to the 
                GROUP BY clause and computes the aggregations.
                -Most common data sturctures 
                    -GROUP BY  
                        -hash table, sorted arrays
        Phase 3: Further Processing: 
            The results from the grouping and aggregation are then passed to the 
                HAVING, SELECT, ORDER BY, and LIMIT clauses for final output processing.
                    -Most common data structures        
                        -HAVING 
                            -hash tables, sorted arrays
                        -SELECT 
                            -in-memory data structures
                            -hash table 
                        -ORDER BY   
                            -sorted arrays/trees
                            -heap structures 
                        -LIMIT  
                            -in-memory data structures 
                            -data structures 