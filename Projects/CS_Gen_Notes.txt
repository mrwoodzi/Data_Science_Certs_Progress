C Language Steps I've gathered so far:
C script -> Preprocessor -> Compiler(assembly code - '.o') -> linking or assembly code generation(if needed or optional) -> OS Kernel(assembly/machine code instructions) -> cpu -> Hardware: 9 steps 
Python script -> Interpreter(Lexical Analysis{tokenization}, Syntax Parsing, Bytecode Generation) -> (Bytecode: this doesn't count as a step) -> Python Virtual Machine -> dynamic typing and execution ->OS Kernel(assembly/machine code instructions) -> cpu -> Hardware: 12 steps

PVM (Python Virtual Machine):
The PVM is part of the Python interpreter.
It executes Python bytecode, which is an intermediate representation of Python code.
The PVM operates during runtime when you run a Python script.
It manages various aspects of code execution, such as memory management, garbage collection, and dynamic typing.
The PVM is responsible for interpreting and executing Python code directly, line by line

C Compiler:
The C compiler translates high-level C source code into machine code or an intermediate representation, depending on the compiler and target platform.
Compilation typically happens before runtime, producing an executable program.
The compiler's primary role is to generate efficient machine code from the C source code.
Once compiled, the resulting program is a standalone executable that can be run independently

Here's a simplified overview of how the kernel works:
Process Scheduler: The process scheduler, a component of the kernel, decides which process or thread should run on the CPU at any given time. 
        It manages a queue of processes and assigns CPU time slices to each process based on various scheduling policies.
Memory Management: Another critical component of the kernel is memory management. It ensures that the machine code and data associated with a 
        process are loaded into memory and are accessible for execution.
Execution Control: When it's a process's turn to execute, the scheduler initiates the execution of that process. It loads the machine code 
        associated with the process into the CPU's instruction cache, sets the CPU's program counter to the starting address of the code, and begins execution.
CPU Execution: The CPU then fetches, decodes, and executes the machine code instructions provided by the process. The CPU's execution unit performs 
        the actual computations and operations specified by the instructions.
Interrupt Handling: The kernel also manages interrupts and exceptions. If an interrupt occurs, the kernel handles it and may switch the CPU's execution 
        context to another process, depending on the type of interrupt (e.g., a hardware interrupt or a system call).

Python Source Code:
Python programs start as human-readable source code files (.py) containing Python instructions.
Lexical Analysis (Tokenization):

The Python interpreter begins by tokenizing the source code, breaking it down into a stream of tokens (e.g., keywords, identifiers, operators).
Syntax Parsing:

The interpreter then parses the token stream to create an Abstract Syntax Tree (AST). This tree represents the structure and syntax of the code.
Bytecode Generation:

The AST is used to generate Python bytecode, which is a low-level representation of the code. Bytecode instructions are specific to Python's virtual machine (PVM).
Python Virtual Machine (PVM):

The PVM is responsible for executing Python bytecode. It manages execution, memory, and garbage collection.
Dynamic Typing and Execution:

Python's dynamic typing is enforced by the PVM during execution. The PVM checks variable types at runtime.
Translation to Lower-Level Instructions (if needed):

For some operations (e.g., file I/O, networking), the PVM interacts with the operating system's kernel through system calls.
The kernel translates these high-level requests into lower-level instructions understood by the hardware.
CPU Execution:

The CPU executes the lower-level instructions provided by the kernel.
The CPU fetches, decodes, and executes machine code instructions.
Hardware Execution:

The hardware carries out the actual computations and operations specified by the machine code instructions.
This involves performing arithmetic, moving data between memory and registers, and interacting with hardware peripherals.
Memory Management:

The operating system's memory management ensures that the machine code and data associated with the Python process are loaded into memory and are accessible for execution.
Interrupt Handling:

The kernel manages interrupts and exceptions. If an interrupt occurs (e.g., hardware interrupt or system call), the kernel may switch the CPU's execution context to handle the interrupt or to another process.
Result:

The Python script's logic is executed, and the CPU produces the desired output based on the script's instructions.



C Source Code:

C programs start as human-readable source code files (.c) containing C instructions.

Preprocessing:
The C compiler initiates preprocessing.
It processes #include directives, macros, and other preprocessor directives.
It expands macros and includes header files to create a preprocessed source code file (.i).

Compilation:
The preprocessed source code is compiled.
The compiler translates C code into assembly code specific to the target architecture.
The result is one or more object files (.o) containing machine code instructions.

Linking (if needed):
If the program consists of multiple source files or relies on external libraries, a linker is used.
The linker combines object files, resolves references, and produces an executable program file (.exe on Windows, or without extension on Unix-like systems).

Assembly Code Generation (optional):
As an optional step, you can generate assembly code (.s) from the compiled object files.
Assembly code is a human-readable representation of the machine code and provides insight into how the program will execute at a lower level.

Operating System Interaction (if needed):
When the program is executed, it may interact with the operating system's kernel.
This interaction includes requesting system resources, making system calls, and performing tasks like file I/O, process management, memory allocation, and more.

Machine Code Execution:
The CPU fetches, decodes, and executes the machine code instructions stored in the executable program file.
The CPU performs the actual computations and operations specified by the machine code.

Memory Management:
The operating system's memory management ensures that the machine code and data associated with the program are loaded into memory and are accessible for execution.

Interrupt Handling:
The kernel manages interrupts and exceptions. If an interrupt occurs (e.g., hardware interrupt or system call), the kernel handles it and may switch the CPU's execution context.